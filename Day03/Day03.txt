1.模板
	1.加载方式
		1.loader
		2.render
	2.语法
		1.变量
			return render(request,'xx.html',{})
			模板中：{{变量}}
		2.标签
			1.{% for %} ... {% endfor %}
			2.{% if %} ... {% endif %}
			3.{% comment %} ... {% comment %}
			4.{% static '' %}
			5.{% load static %}
		3.过滤器
			{{变量|过滤器}}

			{{value|upper}}
			{{value|lower}}
			{{value|floatformat:n}}
			{{value|truncatechars:n}}
	3.静态文件
		在 settings.py 中设置变量
		1.设置静态文件的访问路径
			STATIC_URL = '/static/'
		2.设置静态文件的存储路径
			STATICFILES_DIRS = (os.path.join(BASE_DIR,'static'),)
				1.项目的根目录处创建一个 static 目录
				2.每个应用下创建一个 static 目录
=====================================
1.模板 
	1.模板的继承:MyDjangoDemo03
		1.语法
			1.在父模板中
				必须要标识处哪些内容在子模板中允许被修改
				标签：
					{% block 名称 %}
					{% endblock %}

				block 的作用：
					1.在父模板中正常显示
					2.在子模板中，如果不修改的话则按父模板的显示，要是修改的话则按照子模板的内容显示
			2.在子模板中
				1.指定继承自哪个父模板
					{% extends '父模板名称' %}
				2.增加 block 标签，改写属于自己的内容
					{% block 名称 %}
					{% endblock %}

		练习：
			1.创建项目 - fruitday
			2.创建应用 - index ，配置好相应的路由
			3.访问 http://localhost:8000/login
				显示 之前已经做好的 登录页面(处理好静态资源文件)
			4.访问 http://localhost:8000/register
				创建一个新的模板继承自登录页面，并按照注册的样式进行模板的重写
	2.url()的name参数
		1.url的语法
			url(regex,views,kwargs,name)
				name:为了给当前的url地址起别名，反向解析时使用
				反向解析：通过别名找到对应的地址

				url(regex,views,kwargs=None,name='别名')
		2.反向解析
			1.在模板上做反向解析
				1.基本解析
					{% url '别名' %}
				2.带参的解析
					{% url '别名' '参数1' '参数2' %}
			2.在视图上做反向解析
				1.基本解析
					url = reverse('别名')
					url 就是通过别名解析出来的地址
				2.带参的解析
					url = reverse('别名',args=(参数1,参数2))
					url 就是通过别名解析出来的地址
2.模型 - Models
	1.什么是模型
		根据数据表结构而创建出来的class
	2.ORM
		对象关系映射(Object Relational Mapping)
		三大特征：
			1.表 到 类的映射
			2.数据类型的映射
			3.关系映射
	3.创建 和 配置数据库
		1.创建数据库-webdb
			create database webdb default charset utf8 collate utf8_general_ci;
			create database 库名 [character set utf8];
		2.Django的数据库配置
			在 settings.py 中配置数据库的信息
			DATABASES = {
				'default':{
					'ENGINE':'django.db.backends.sqlite3',
					'NAME':os.path.join(BASE_DIR,db.sqlite3),
				}
			}

			1.ENGINE:指定要连接的数据库的驱动程序
				连接mysql的话可以取值为
					'django.db.backends.mysql'
			2.NAME:指定要连接到的数据库的名称
				连接mysql的话可以取值为
					数据库名
			3.USER:指定登录到数据库管理系统的用户名
				连接到mysql的话 可以为 root
			4.PASSWORD:指定登录到数据库管理系统的密码
			5.HOST:指定要连接到的主机地址
				如果是本机的话：127.0.0.1 或 localhost
			6.PORT:指定端口号
				mysql的默认为 3306
		3.数据库的同步操作
			1. ./manage.py makemigrations
				作用：将每个应用下的models.py文件生成一个数据库的中间文件，并将中间文件保存到migrations的目录中
			2. ./manage.py migrate
				作用：将每个应用下的migrations目录中的中间文件同步到数据库中

		4.编写Models
			1.举个例子
			2.Models的语法规范
				class ClassName(models.Model):
					属性=models.FIELDTYPE(FIELD_OPTIONS)
						FIELDTYPE : 字段类型
							CharField()
						FIELD_OPTIONS : 字段选项(字段说明)
							max_length=30

							class Publisher(models.Model):
                                name=models.CharField(max_length=30)
                                address=models.CharField(max_length=200)
                                city=models.CharField(max_length=50)
                                country=models.CharField(max_length=50)
                                websize=models.URLField()
				
				字段类型 ：FIELDTYPE
					1.BooleanField()
						编程语言中使用True 或 False 来表示该列的值
						数据库中使用 1 或 0 来表示具体的值
						数据类型为：tinyint
					2.CharField()
						编程语言中使用字符串来表示该列的值
						数据库中也是字符串
						数据类型为：varchar
						注意：必须要指定max_length参数值
					3.DateField()
						编程语言中使用字符串或Date类型的数据表示该值
						数据库中使用的是时间字符串
						数据类型为：date
					4.DateTimeField()
						数据类型为：datetime
					5.DecimalField()
						编程语言中使用数字(小数)来表示该列的值
						数据库使用小数表示
						数据类型：decimal
						money=models.DecimalField(max_digits=7,decimal_places=2)
					6.FloatField()
						编程语言中使用数字(小数)来表示该列的值
						数据库使用小数
						数据类型：float
					7.IntegerField()
						数据类型：int
					8.EmailField()
						编程语言中使用字符串来表示一段Email地址
						数据库中使用 字符串表示
						数据类型：varchar
					9.URLField()
						编程语言中使用字符串来表示一段网址
						数据库中使用 字符串表示
						数据类型：varchar
					10.ImageFiled()
						目的：存储图片路径
						数据类型：varchar
						image=models.ImageField(upload_to='images/')
				字段选项 ：FIELD_OPTIONS
					1.default
						作用：为当前字段指定默认值
					2.null
						作用：指定当前字段是否允许为空，默认为False，不能为空
					3.db_index
						作用：指定是否为当前字段指定索引
					4.db_column
						作用：指定当前属性映射到表中的类名，如果不指定则采用属性名称作为类名
				练习：
					在 index 应用中的 models.py 中追加两个 class
					1.Author - 作者
						1.name - 姓名
						2.age - 年龄
						3.email - 邮箱(允许为空)


1.模型
	1.相关指令
		1.版本切换指令
			./manage.py migrate 应用名称 版本号
		2.通过数据库自动导出models类
			./manage.py inspectdb > 文件名.py










